const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const webpackDev  = require('webpack-dev-middleware')
const webpackHot = require('webpack-hot-middleware')
const PassThrough = require('stream').PassThrough;
const serverConfig = require('./webpack.server.config')
const clientConfig = require('./webpack.client.config')
const readFile = (fs, file) => {
    try {
      return fs.readFileSync(path.join(serverConfig.output.path, file), 'utf-8')
    } catch (e) {}
  }
  const devMiddleware = (compiler, opts) => {
    const middleware = webpackDev(compiler, opts)
      return async (ctx, next) => {
          await middleware(ctx.req, {
              end: (content) => {
                  ctx.body = content
              },
              setHeader: (name, value) => {
                  ctx.set(name, value)
              }
          }, next)
      }
  }
  const hotMiddleware = (compiler, opts) => {
    const middleware = webpackHot(compiler, opts);
    return async (ctx, next) => {
        let stream = new PassThrough()
        ctx.body = stream
        await middleware(ctx.req, {
            write: stream.write.bind(stream),
            writeHead: (status, headers) => {
                ctx.status = status
                ctx.set(headers)
            }
        }, next)
    }
    
}
module.exports = function setupDevServer(app,cb){
  let bundle
  let template
  let ready
  const readyPromise = new Promise(r => { resolve = r })
  const update = () => {
      if (bundle) {
          resolve()
        cb(bundle, {
          template
        })
      }
    }
  // 客户端
  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client?noInfo=true&reload=true', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  // const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
  //   publicPath: clientConfig.output.publicPath,
  //   noInfo: true
  // })
  
  app.use(devMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  }))
  clientCompiler.plugin('done', () => {
    const fs = devMiddleware.fileSystem
    const readFile = file => fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'))
    if (bundle) {
      ready(bundle, {
        clientManifest
      })
    }
  })

  // hot middleware
  
  app.use(hotMiddleware(clientCompiler))

  // 加载模版文件
  template = fs.readFileSync(path.resolve(__dirname, '../src/index.server.template.html'), 'utf-8')
  // watch and update server renderer
  // 服务器监视
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })
  return readyPromise
}