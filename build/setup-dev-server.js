const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const webpackDev  = require('webpack-dev-middleware')
const webpackHot = require('webpack-hot-middleware')
const PassThrough = require('stream').PassThrough;
const serverConfig = require('./webpack.server.config')
const clientConfig = require('./webpack.client.config')
const devMiddleware = require('./koa-middleware/dev')
const hotMiddleware = require('./koa-middleware/hot')
const readFile = (fs, file) => {
    try {
      return fs.readFileSync(path.join(serverConfig.output.path, file), 'utf-8')
    } catch (e) {
      console.log(e)
    }
  }
module.exports = function setupDevServer(app,cb){
  let bundle
  let clientManifest
  let template
  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
      if (bundle && clientManifest) {
        ready()
        console.log('callback')
        cb(bundle, {
          template,
          clientManifest
        })
      }
    }
  // 客户端
  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )
  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const dd = devMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  app.use((ctx, next) => dd(ctx.req, {
    end: (content) => {
      ctx.body = content
    },
    setHeader(){
      ctx.set.apply(ctx, arguments)
    }
  }, next)
)
  clientCompiler.plugin('done', (stats) => {
    console.log('clientCompiler is done!')
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(dd.fileSystem,'vue-ssr-client-manifest.json'));
    // console.log(clientManifest)
    update()
  })

  // hot middleware
  
  app.use(hotMiddleware(clientCompiler))

  // 加载模版文件
  template = fs.readFileSync(path.resolve(__dirname, '../src/index.server.template.html'), 'utf-8')
  // watch and update server renderer
  // 服务器监视
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })
  return readyPromise
}